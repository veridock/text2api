# GraphQL application generated by text2api

import graphene
from graphene import ObjectType, String
from flask import Flask, jsonify
from flask_graphql import GraphQLView
from flask_cors import CORS
import os

# Flask app initialization
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')

# CORS
CORS(app)

# Database configuration (if needed)
{% if api_spec.database_required %}
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime

app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv(
    'DATABASE_URL', 
    'sqlite:///{{ api_spec.name }}.db'
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
db = SQLAlchemy(app)

# Database models
{% for model in api_spec.models %}
class {{ model.name }}(db.Model):
    __tablename__ = '{{ model.name|lower }}'
    
    id = db.Column(db.Integer, primary_key=True)
    {% for field in model.fields %}
    {{ field.name }} = db.Column({{ field.type }}{% if field.required %}, nullable=False{% endif %})
    {% endfor %}
    
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
{% endfor %}
db.create_all()
{% endif %}

# GraphQL Types
class Query(ObjectType):
    # Add your queries here
    hello = String(description='A simple greeting')

    def resolve_hello(self, info):
        return 'Hello, GraphQL!'

# Schema
schema = graphene.Schema(query=Query)

# Routes
app.add_url_rule(
    '/graphql',
    view_func=GraphQLView.as_view(
        'graphql',
        schema=schema,
        graphiql=True
    )
)

@app.route('/')
def index():
    return jsonify({
        'name': '{{ api_spec.name }}',
        'version': '1.0.0',
        'docs': '/graphql',
        'status': 'running'
    })

if __name__ == '__main__':
    app.run(debug=True)
