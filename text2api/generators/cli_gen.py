# text2api/generators/cli_gen.py

"""
Generator dla CLI tools
"""

from pathlib import Path
from typing import Dict
from jinja2 import Environment, DictLoader

from ..core.analyzer import ApiSpec
from ..utils.file_utils import FileManager


class CLIGenerator:
    """Generator CLI tools używając Click"""

    def __init__(self):
        self.file_manager = FileManager()
        self.templates = self._load_templates()

    def _load_templates(self) -> Environment:
        """Ładuje szablony Jinja2 dla CLI"""

        templates = {
            'cli.py': '''#!/usr/bin/env python3
"""
{{ api_spec.description }}
CLI tool generated by text2api
"""

import click
import json
import csv
import os
import sys
from pathlib import Path
from datetime import datetime
from typing import List, Dict, Any
{% if api_spec.database_required %}
import sqlite3
{% endif %}

# Version
__version__ = "1.0.0"

class {{ api_spec.name | title }}CLI:
    """{{ api_spec.description }}"""

    def __init__(self):
        {% if api_spec.database_required %}
        self.db_path = os.getenv('DATABASE_PATH', '{{ api_spec.name }}.db')
        self._init_database()
        {% endif %}
        self.verbose = False

    {% if api_spec.database_required %}
    def _init_database(self):
        """Initialize database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        {% for model in api_spec.models %}
        # Create {{ model.name }} table
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS {{model.name.lower()}}s(
                { % for field in model.fields %}
        {{field.name}}
        { % if field.type == 'integer' %}INTEGER
        { % elif field.type == 'string' %}TEXT
        { % elif field.type == 'boolean' %}BOOLEAN
        { % else %}TEXT
        { % endif %}{ % if field.get('primary_key') %} PRIMARY
        KEY
        { % endif %}{ % if not loop.last %}, { % endif %}
        { % endfor %}
        )
        ''')
        {% endfor %}

        conn.commit()
        conn.close()

    def _get_db_connection(self):
        """Get database connection"""
        return sqlite3.connect(self.db_path)
    {% endif %}

    def log(self, message: str, level: str = "INFO"):
        """Log message if verbose mode"""
        if self.verbose:
            timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
            click.echo(f"[{timestamp}] {level}: {message}", err=True)

    def error(self, message: str):
        """Display error message"""
        click.echo(click.style(f"Error: {message}", fg="red"), err=True)

    def success(self, message: str):
        """Display success message"""
        click.echo(click.style(f"Success: {message}", fg="green"))

    def warning(self, message: str):
        """Display warning message"""
        click.echo(click.style(f"Warning: {message}", fg="yellow"))

    def info(self, message: str):
        """Display info message"""
        click.echo(click.style(message, fg="blue"))

# Create CLI instance
cli_instance = {{ api_spec.name | title }}CLI()

@click.group()
@click.version_option(version=__version__)
@click.option('--verbose', '-v', is_flag=True, help='Enable verbose output')
@click.pass_context
def cli(ctx, verbose):
    """{{ api_spec.description }}"""
    ctx.ensure_object(dict)
    cli_instance.verbose = verbose

@cli.command()
def status():
    """Check system status"""
    cli_instance.info("=== {{ api_spec.name | title }} Status ===")

    {% if api_spec.database_required %}
    # Check database
    try:
        conn = cli_instance._get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT name FROM sqlite_master WHERE type='table'")
        tables = cursor.fetchall()
        conn.close()

        cli_instance.success(f"Database: Connected ({len(tables)} tables)")
        cli_instance.log(f"Database path: {cli_instance.db_path}")

        {% for model in api_spec.models %}
        # Count {{ model.name.lower() }}s
        conn = cli_instance._get_db_connection()
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM {{ model.name.lower() }}s")
        count = cursor.fetchone()[0]
        conn.close()
        cli_instance.info(f"{{ model.name }}s: {count} records")
        {% endfor %}

    except Exception as e:
        cli_instance.error(f"Database error: {e}")
    {% else %}
    cli_instance.success("CLI tool ready")
    {% endif %}

    cli_instance.info(f"Version: {__version__}")

{% for model in api_spec.models %}
# {{ model.name }} commands
@cli.group()
def {{ model.name.lower() }}():
    """{{ model.name }} management commands"""
    pass

@{{ model.name.lower() }}.command()
{% for field in model.fields %}
{% if field.name != '# text2api/generators/grpc_gen.py

"""
Generator dla gRPC API
"""

from pathlib import Path
from typing import Dict
from jinja2 import Environment, DictLoader

from ..core.analyzer import ApiSpec
from ..utils.file_utils import FileManager


class GRPCGenerator:
    """Generator kodu gRPC"""

    def __init__(self):
        self.file_manager = FileManager()
        self.templates = self._load_templates()

    def _load_templates(self) -> Environment:
        """Ładuje szablony Jinja2 dla gRPC"""

        templates = {
            'service.proto': '''
        syntax = "proto3";

        package
        {{api_spec.name}};

        // {{api_spec.description}}

        { %
        for model in api_spec.models %}
        message {{model.name}} {
        {% for field in model.fields %}
        {%set field_type = field.type | proto_type %}
        {% if field.get('repeated') %}repeated {%endif %}{{field_type}} {{field.name}} = {{loop.index}};
        {%endfor %}
        }

        message {{model.name}}Request {
        {% for field in model.fields %}
        {% if field.name != 'id' and not field.get('auto_now_add') %}
        {%set field_type = field.type | proto_type %}
        {{field_type}} {{field.name}} = {{loop.index}};
        {%endif %}
        {%endfor %}
        }

        message {{model.name}}List {
        repeated {{model.name}} items = 1;
        int32 total = 2;
        }

        {%endfor %}

        message Empty {}

        message IdRequest {
        int32 id = 1;
        }

        message HealthResponse {
        string status = 1;
        string message = 2;
        }

        // Service definition
        service {{api_spec.name | title}}Service {
        // Health check
        rpc Health(Empty) returns (HealthResponse);

        {% for model in api_spec.models %}
        // {{model.name}} operations
        rpc Create{{model.name}}({{model.name}}Request) returns ({{model.name}});
        rpc Get{{model.name}}(IdRequest) returns ({{model.name}});
        rpc List{{model.name}}s(Empty) returns ({{model.name}}List);
        rpc Update{{model.name}}({{model.name}}) returns ({{model.name}});
        rpc Delete{{model.name}}(IdRequest) returns (Empty);
        {%endfor %}
        }
        ''',

                    'server.py': '''"""
gRPC server generated by text2api
"""

        import grpc
        from concurrent import futures
        import time
        import logging
        import os
        {% if api_spec.database_required %}
        import sqlite3
        from typing import List, Optional
        {%endif %}

        # Generated protobuf imports
        import {{api_spec.name}}_pb2
        import {{api_spec.name}}_pb2_grpc


class {{api_spec.name | title}}Service({{api_spec.name}}_pb2_grpc.{{api_spec.name | title}}ServiceServicer):
    """{{ api_spec.description }}"""

    def __init__(self):
        { % if api_spec.database_required %}
        self.db_path = "{{ api_spec.name }}.db"
        self._init_database()
        { % endif %}
        logging.info("{{ api_spec.name | title }}Service initialized")

    { % if api_spec.database_required %}

    def _init_database(self):
        """Initialize SQLite database"""
        conn = sqlite3.connect(self.db_path)
        cursor = conn.cursor()

        { %
        for model in api_spec.models %}
        # Create {{ model.name }} table
        cursor.execute('''
                       CREATE TABLE IF NOT EXISTS {{ model.name.lower
                       (
                       ) }} s
                       (
                           {
                           %
                           for
                           field
                           in
                           model
                           .
                           fields
                           %}
                           {
                           {
                           field
                           .
                           name}} {
                           %
                           if
                           field
                           .
                           type
                           ==
                           'integer'
                           %}
                           INTEGER {
                           %
                           elif
                           field
                           .
                           type
                           ==
                           'string'
                           %}
                           TEXT{
                           %
                           elif
                           field
                           .
                           type
                           ==
                           'boolean'
                           %}
                           BOOLEAN{
                           %
                           else
                           %}
                           TEXT{
                           %
                           endif
                           %}{
                           %
                           if
                           field
                           .
                           get
                       (
                           'primary_key'
                       ) %} PRIMARY KEY {% endif %}{% if not loop.last %},{% endif %}
                           {% endfor %}
                           )
                       ''')
        { % endfor %}

        conn.commit()
        conn.close()

    def _get_db_connection(self):
        """Get database connection"""
        return sqlite3.connect(self.db_path)

    { % endif %}

    def Health(self, request, context):
        """Health check endpoint"""
        return {{api_spec.name}}
        _pb2.HealthResponse(
            status="OK",
            message="{{ api_spec.description }} is running"
        )

    { %
    for model in api_spec.models %}

    def Create{{model.name}}(self, request, context):

    """Create new {{ model.name.lower() }}"""
    try:
        { % if api_spec.database_required %}
        conn = self._get_db_connection()
        cursor = conn.cursor()

        cursor.execute('''
                       INSERT INTO {{ model.name.lower() }} s ({% for field in model.fields %}{% if field.name != 'id' and not field.get('auto_now_add') %}{{ field.name }}{% if not loop.last %}, {% endif %}{% endif %}{% endfor %})
                       VALUES ({% for field in model.fields %}{% if field.name != 'id' and not field.get('auto_now_add') %}?{% if not loop.last %}, {% endif %}{% endif %}{% endfor %})
                       ''', ({ % for field in model.fields %}{ % if field.name != 'id' and not field.get(
            'auto_now_add') %}request.
        {{field.name}}
        { % if not loop.last %}, { % endif %}{ % endif %}{ % endfor %}))

        item_id = cursor.lastrowid
        conn.commit()
        conn.close()

        return {{api_spec.name}}
        _pb2.
        {{model.name}}(
            id=item_id,
            { %
        for field in model.fields %}
        {% if field.name != 'id' and not field.get('auto_now_add') %}
        {{field.name}}=request.{{field.name}}{% if not loop.last %}, {%endif %}
        {%endif %}
        {%endfor %}
        )
        { % else %}
        # Mock response
        return {{api_spec.name}}
        _pb2.
        {{model.name}}(
            id=1,
            { %
        for field in model.fields %}
        {% if field.name != 'id' and not field.get('auto_now_add') %}
        {{field.name}}=request.{{field.name}}{% if not loop.last %}, {%endif %}
        {%endif %}
        {%endfor %}
        )
        { % endif %}
        except Exception as e:
        context.set_code(grpc.StatusCode.INTERNAL)
        context.set_details(f'Error creating {{ model.name.lower() }}: {str(e)}')
        return {{api_spec.name}}
        _pb2.
        {{model.name}}()


def Get{{model.name}}(self, request, context):


"""Get {{ model.name.lower() }} by ID"""
try:
    { % if api_spec.database_required %}
    conn = self._get_db_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM {{ model.name.lower() }}s WHERE id = ?', (request.id,))
    row = cursor.fetchone()
    conn.close()

    if not row:
        context.set_code(grpc.StatusCode.NOT_FOUND)
        context.set_details('{{ model.name }} not found')
        return {{api_spec.name}}
        _pb2.
        {{model.name}}()

    return {{api_spec.name}}
    _pb2.
    {{model.name}}(
        { % for field in model.fields %}
    {{field.name}} = row[{{loop.index0}}]
    { % if not loop.last %}, { % endif %}
    { % endfor %}
    )
    { % else %}
    # Mock response
    return {{api_spec.name}}
    _pb2.
    {{model.name}}(
        id=request.id,
        { %
    for field in model.fields %}
    {% if field.name != 'id' %}
    {{field.name}}="Sample {{ field.name }}"{% if not loop.last %}, {%endif %}
    {%endif %}
    {%endfor %}
    )
    { % endif %}
    except Exception as e:
    context.set_code(grpc.StatusCode.INTERNAL)
    context.set_details(f'Error getting {{ model.name.lower() }}: {str(e)}')
    return {{api_spec.name}}
    _pb2.
    {{model.name}}()


def List{{model.name}}


s(self, request, context):
"""List all {{ model.name.lower() }}s"""
try:
    { % if api_spec.database_required %}
    conn = self._get_db_connection()
    cursor = conn.cursor()

    cursor.execute('SELECT * FROM {{ model.name.lower() }}s')
    rows = cursor.fetchall()
    conn.close()

    items = []
    for row in rows:
        item = {{api_spec.name}}
        _pb2.
        {{model.name}}(
            { % for field in model.fields %}
        {{field.name}} = row[{{loop.index0}}]
        { % if not loop.last %}, { % endif %}
        { % endfor %}
        )
        items.append(item)

    return {{api_spec.name}}
    _pb2.
    {{model.name}}
    List(
        items=items,
        total=len(items)
    )
    { % else %}
    # Mock response
    items = [
        {{api_spec.name}}_pb2.{{model.name}}(
            id=1,
            { %
    for field in model.fields %}
    {% if field.name != 'id' %}
    {{field.name}}="Sample {{ field.name }}"{% if not loop.last %}, {%endif %}
    {%endif %}
    {%endfor %}
    )
    ]

    return {{api_spec.name}}
    _pb2.
    {{model.name}}
    List(
        items=items,
        total=len(items)
    )
    { % endif %}
    except Exception as e:
    context.set_code(grpc.StatusCode.INTERNAL)
    context.set_details(f'Error listing {{ model.name.lower() }}s: {str(e)}')
    return {{api_spec.name}}
    _pb2.
    {{model.name}}
    List()


def Update{{model.name}}(self, request, context):


"""Update {{ model.name.lower() }}"""
try:
    { % if api_spec.database_required %}
    conn = self._get_db_connection()
    cursor = conn.cursor()

    cursor.execute('''
                   UPDATE {{ model.name.lower() }} s
                   SET {% for field in model.fields %}{% if field.name != 'id' and not field.get('auto_now_add') %}{{ field.name }} = ?{% if not loop.last %}, {% endif %}{% endif %}{% endfor %}
                   WHERE id = ?
                   ''', ({ % for field in model.fields %}{ % if field.name != 'id' and not field.get(
        'auto_now_add') %}request.
    {{field.name}}, { % endif %}{ % endfor %}request.id))

    if cursor.rowcount == 0:
        context.set_code(grpc.StatusCode.NOT_FOUND)
        context.set_details('{{ model.name }} not found')
        return {{api_spec.name}}
        _pb2.
        {{model.name}}()

    conn.commit()
    conn.close()

    return request
    { % else %}
    # Mock response
    return request
    { % endif %}
    except Exception as e:
    context.set_code(grpc.StatusCode.INTERNAL)
    context.set_details(f'Error updating {{ model.name.lower() }}: {str(e)}')
    return {{api_spec.name}}
    _pb2.
    {{model.name}}()


def Delete{{model.name}}(self, request, context):


"""Delete {{ model.name.lower() }}"""
try:
    { % if api_spec.database_required %}
    conn = self._get_db_connection()
    cursor = conn.cursor()

    cursor.execute('DELETE FROM {{ model.name.lower() }}s WHERE id = ?', (request.id,))

    if cursor.rowcount == 0:
        context.set_code(grpc.StatusCode.NOT_FOUND)
        context.set_details('{{ model.name }} not found')

    conn.commit()
    conn.close()
    { % endif %}

    return {{api_spec.name}}
    _pb2.Empty()
except Exception as e:
    context.set_code(grpc.StatusCode.INTERNAL)
    context.set_details(f'Error deleting {{ model.name.lower() }}: {str(e)}')
    return {{api_spec.name}}
    _pb2.Empty()

{ % endfor %}

def serve():
    """Start gRPC server"""
    server = grpc.server(futures.ThreadPoolExecutor(max_workers=10))
    {{api_spec.name}}
    _pb2_grpc.add_
    {{api_spec.name | title}}
    ServiceServicer_to_server(
        {{api_spec.name | title}}
    Service(), server
    )

    port = os.getenv('GRPC_PORT', '50051')
    server.add_insecure_port(f'[::]:{port}')

    server.start()
    logging.info(f"gRPC server started on port {port}")

    try:
        while True:
            time.sleep(86400)  # Keep server running
    except KeyboardInterrupt:
        logging.info("Stopping gRPC server...")
        server.stop(0)


if __name__ == '__main__':
    logging.basicConfig(level=logging.INFO)
    serve()
''',

            'client.py': '''"""
gRPC client example for {{ api_spec.name }}
"""

import grpc
import

{{api_spec.name}}
_pb2
import

{{api_spec.name}}
_pb2_grpc


def run_client():
    """Example gRPC client"""

    # Connect to server
    with grpc.insecure_channel('localhost:50051') as channel:
        stub = {{api_spec.name}}
        _pb2_grpc.
        {{api_spec.name | title}}
        ServiceStub(channel)

        # Health check
        print("=== Health Check ===")
        health_response = stub.Health({{api_spec.name}}
        _pb2.Empty())
        print(f"Status: {health_response.status}")
        print(f"Message: {health_response.message}")

        { %
        for model in api_spec.models %}
        # {{ model.name }} operations
        print(f"\\n=== {{ model.name }} Operations ===")

        # Create
        create_request = {{api_spec.name}}
        _pb2.
        {{model.name}}
        Request(
            { % for field in model.fields %}
        { % if field.name != 'id' and not field.get('auto_now_add') %}
        {{field.name}} = "Test {{ field.name }}"
        { % if not loop.last %}, { % endif %}
        { % endif %}
        { % endfor %}
        )

        created_
        {{model.name.lower()}} = stub.Create
        {{model.name}}(create_request)
        print(f"Created {{ model.name.lower() }}: {created_{{model.name.lower()}}}")

        # Get
        get_request = {{api_spec.name}}
        _pb2.IdRequest(id=created_
        {{model.name.lower()}}.id)
        {{model.name.lower()}} = stub.Get
        {{model.name}}(get_request)
        print(f"Retrieved {{ model.name.lower() }}: {{ model.name.lower() }}")

        # List
        {{model.name.lower()}}
        _list = stub.List
        {{model.name}}
        s({{api_spec.name}}
        _pb2.Empty())
        print(f"{{ model.name }} list: {len({{model.name.lower()}}_list.items)} items")

        { % endfor %}

        if __name__ == '__main__':
            run_client()
        ''',

                'requirements.txt': '''
        grpcio == 1.60
        .0
        grpcio - tools == 1.60
        .0
        protobuf == 4.25
        .1
        { % if api_spec.database_required %}
        sqlite3
        { % endif %}
        '''
            }

            return Environment(loader=DictLoader(templates))

        def _load_filters(self):
            """Dodaje custom filtry"""

            def proto_type(field_type):
                """Konwertuje typy na protobuf types"""
                mapping = {
                    'integer': 'int32',
                    'string': 'string',
                    'boolean': 'bool',
                    'float': 'float',
                    'datetime': 'string'
                }
                return mapping.get(field_type, 'string')

            self.templates.filters['proto_type'] = proto_type

        async def generate(self, api_spec: ApiSpec, output_path: Path) -> Dict[str, str]:
            """Generuje kod gRPC"""

            await self.file_manager.ensure_directory(output_path)
            self._load_filters()

            generated_files = {}

            # Generuj proto file
            proto_content = self.templates.get_template('service.proto').render(api_spec=api_spec)
            proto_path = output_path / f"{api_spec.name}.proto"
            await self.file_manager.write_file(proto_path, proto_content)
            generated_files[f'{api_spec.name}.proto'] = str(proto_path)

            # Generuj server
            server_content = self.templates.get_template('server.py').render(api_spec=api_spec)
            server_path = output_path / "server.py"
            await self.file_manager.write_file(server_path, server_content)
            generated_files['server.py'] = str(server_path)

            # Generuj client example
            client_content = self.templates.get_template('client.py').render(api_spec=api_spec)
            client_path = output_path / "client.py"
            await self.file_manager.write_file(client_path, client_content)
            generated_files['client.py'] = str(client_path)

            # Generuj requirements
            req_content = self.templates.get_template('requirements.txt').render(api_spec=api_spec)
            req_path = output_path / "requirements.txt"
            await self.file_manager.write_file(req_path, req_content)
            generated_files['requirements.txt'] = str(req_path)

            # Generuj protobuf compilation script
            compile_script = f'''  # !/bin/bash
        # Compile protobuf files

        python - m
        grpc_tools.protoc \ \
                --proto_path =. \ \
                --python_out =. \ \
                --grpc_python_out =. \ \
                {api_spec.name}.proto

        echo
        "Protobuf files compiled successfully"
        '''

            script_path = output_path / "compile_proto.sh"
            await self.file_manager.write_file(script_path, compile_