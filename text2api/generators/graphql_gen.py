"""
Generator dla GraphQL API
"""

from pathlib import Path
from typing import Dict
from jinja2 import Environment, DictLoader

from ..core.analyzer import ApiSpec
from ..utils.file_utils import FileManager


class GraphQLGenerator:
    """Generator kodu GraphQL z Graphene"""

    def __init__(self):
        self.file_manager = FileManager()
        self.templates = self._load_templates()

    def _load_templates(self) -> Environment:
        """≈Åaduje szablony Jinja2 dla GraphQL"""

        templates = {
            'app.py': '''"""
GraphQL application generated by text2api
"""

import graphene
from graphene import ObjectType, String, Int, List, Field, Mutation
from graphene_sqlalchemy import SQLAlchemyObjectType, SQLAlchemyConnectionField
from flask import Flask, request
from flask_graphql import GraphQLView
from flask_cors import CORS
import os
{% if api_spec.database_required %}
from flask_sqlalchemy import SQLAlchemy
from datetime import datetime
{% endif %}
{% if api_spec.auth_type %}
from flask_jwt_extended import JWTManager, jwt_required, get_jwt_identity
import jwt
{% endif %}

# Flask app initialization
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY', 'dev-secret-key')

# CORS
CORS(app)

{% if api_spec.database_required %}
# Database configuration
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv(
    'DATABASE_URL', 
    'sqlite:///{{ api_spec.name }}.db'
)
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False

db = SQLAlchemy(app)
{% endif %}

{% if api_spec.auth_type %}
# JWT configuration
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET', 'jwt-secret')
jwt_manager = JWTManager(app)
{% endif %}

{% if api_spec.database_required %}
# Database models
{% for model in api_spec.models %}
class {{ model.name }}Model(db.Model):
    __tablename__ = '{{ model.name.lower() }}s'
    
    {% for field in model.fields %}
    {{ field.name }} = db.Column(
        {% if field.type == 'integer' %}db.Integer{% elif field.type == 'string' %}db.String(255){% elif field.type == 'boolean' %}db.Boolean{% elif field.type == 'datetime' %}db.DateTime{% else %}db.String(255){% endif %}{% if field.get('primary_key') %}, primary_key=True{% endif %}{% if field.get('auto_now_add') %}, default=datetime.utcnow{% endif %}
    )
    {% endfor %}
    
    def __repr__(self):
        return f'<{{ model.name }} {self.id}>'

{% endfor %}

# Create tables
with app.app_context():
    db.create_all()
{% endif %}

# GraphQL Types
{% for model in api_spec.models %}
{% if api_spec.database_required %}
class {{ model.name }}Type(SQLAlchemyObjectType):
    class Meta:
        model = {{ model.name }}Model
        interfaces = (graphene.relay.Node,)
{% else %}
class {{ model.name }}Type(ObjectType):
    {% for field in model.fields %}
    {{ field.name }} = {% if field.type == 'integer' %}Int(){% elif field.type == 'string' %}String(){% elif field.type == 'boolean' %}Boolean(){% else %}String(){% endif %}
    {% endfor %}
{% endif %}

{% endfor %}

# Input types for mutations
{% for model in api_spec.models %}
class {{ model.name }}Input(graphene.InputObjectType):
    {% for field in model.fields %}
    {% if field.name != 'id' and not field.get('auto_now_add') and not field.get('auto_now') %}
    {{ field.name }} = {% if field.type == 'integer' %}Int(){% elif field.type == 'string' %}String(){% elif field.type == 'boolean' %}Boolean(){% else %}String(){% endif %}
    {% endif %}
    {% endfor %}

{% endfor %}

{% if api_spec.auth_type %}
# Authentication helpers
def auth_required(f):
    def wrapper(*args, **kwargs):
        auth_header = request.headers.get('Authorization')
        if not auth_header:
            raise Exception('Authorization header required')
        
        try:
            token = auth_header.split(' ')[1]  # Bearer <token>
            payload = jwt.decode(token, app.config['JWT_SECRET_KEY'], algorithms=['HS256'])
            return f(*args, **kwargs)
        except jwt.InvalidTokenError:
            raise Exception('Invalid token')
    return wrapper
{% endif %}

# Queries
class Query(ObjectType):
    {% for model in api_spec.models %}
    {% if api_spec.database_required %}
    all_{{ model.name.lower() }}s = SQLAlchemyConnectionField({{ model.name }}Type.connection)
    {{ model.name.lower() }} = Field({{ model.name }}Type, id=Int(required=True))
    {% else %}
    all_{{ model.name.lower() }}s = List({{ model.name }}Type)
    {{ model.name.lower() }} = Field({{ model.name }}Type, id=Int(required=True))
    {% endif %}
    
    {% endfor %}
    
    # Health check
    health = String()
    
    def resolve_health(self, info):
        return "GraphQL API is running"
    
    {% for model in api_spec.models %}
    {% if api_spec.database_required %}
    def resolve_{{ model.name.lower() }}(self, info, id):
        {% if api_spec.auth_type %}
        # TODO: Add authentication check if needed
        {% endif %}
        return {{ model.name }}Model.query.get(id)
    
    def resolve_all_{{ model.name.lower() }}s(self, info, **kwargs):
        {% if api_spec.auth_type %}
        # TODO: Add authentication check if needed
        {% endif %}
        return {{ model.name }}Model.query.all()
    {% else %}
    def resolve_{{ model.name.lower() }}(self, info, id):
        # Mock data
        return {{ model.name }}Type(
            id=id,
            {% for field in model.fields %}
            {% if field.name != 'id' %}
            {{ field.name }}="Sample {{ field.name }}"{% if not loop.last %},{% endif %}
            {% endif %}
            {% endfor %}
        )
    
    def resolve_all_{{ model.name.lower() }}s(self, info):
        # Mock data
        return [
            {{ model.name }}Type(
                id=1,
                {% for field in model.fields %}
                {% if field.name != 'id' %}
                {{ field.name }}="Sample {{ field.name }}"{% if not loop.last %},{% endif %}
                {% endif %}
                {% endfor %}
            )
        ]
    {% endif %}
    
    {% endfor %}

# Mutations
{% for model in api_spec.models %}
class Create{{ model.name }}(Mutation):
    class Arguments:
        {{ model.name.lower() }}_data = {{ model.name }}Input(required=True)
    
    {{ model.name.lower() }} = Field({{ model.name }}Type)
    
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def mutate(self, info, {{ model.name.lower() }}_data):
        {% if api_spec.database_required %}
        {{ model.name.lower() }} = {{ model.name }}Model(**{{ model.name.lower() }}_data)
        db.session.add({{ model.name.lower() }})
        db.session.commit()
        return Create{{ model.name }}({{ model.name.lower() }}={{ model.name.lower() }})
        {% else %}
        # Mock response
        return Create{{ model.name }}(
            {{ model.name.lower() }}={{ model.name }}Type(
                id=1,
                **{{ model.name.lower() }}_data
            )
        )
        {% endif %}

class Update{{ model.name }}(Mutation):
    class Arguments:
        id = Int(required=True)
        {{ model.name.lower() }}_data = {{ model.name }}Input(required=True)
    
    {{ model.name.lower() }} = Field({{ model.name }}Type)
    
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def mutate(self, info, id, {{ model.name.lower() }}_data):
        {% if api_spec.database_required %}
        {{ model.name.lower() }} = {{ model.name }}Model.query.get(id)
        if not {{ model.name.lower() }}:
            raise Exception('{{ model.name }} not found')
        
        for key, value in {{ model.name.lower() }}_data.items():
            setattr({{ model.name.lower() }}, key, value)
        
        db.session.commit()
        return Update{{ model.name }}({{ model.name.lower() }}={{ model.name.lower() }})
        {% else %}
        # Mock response
        return Update{{ model.name }}(
            {{ model.name.lower() }}={{ model.name }}Type(
                id=id,
                **{{ model.name.lower() }}_data
            )
        )
        {% endif %}

class Delete{{ model.name }}(Mutation):
    class Arguments:
        id = Int(required=True)
    
    success = Boolean()
    
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def mutate(self, info, id):
        {% if api_spec.database_required %}
        {{ model.name.lower() }} = {{ model.name }}Model.query.get(id)
        if not {{ model.name.lower() }}:
            raise Exception('{{ model.name }} not found')
        
        db.session.delete({{ model.name.lower() }})
        db.session.commit()
        return Delete{{ model.name }}(success=True)
        {% else %}
        # Mock response
        return Delete{{ model.name }}(success=True)
        {% endif %}

{% endfor %}

class Mutations(ObjectType):
    {% for model in api_spec.models %}
    create_{{ model.name.lower() }} = Create{{ model.name }}.Field()
    update_{{ model.name.lower() }} = Update{{ model.name }}.Field()
    delete_{{ model.name.lower() }} = Delete{{ model.name }}.Field()
    {% endfor %}

# Create schema
schema = graphene.Schema(query=Query, mutation=Mutations)

# Routes
@app.route('/')
def index():
    return '''
    <h1>{{ api_spec.name }} GraphQL API</h1>
    <p>{{ api_spec.description }}</p>
    <p><a href="/graphql">GraphQL Playground</a></p>
    <p><a href="/health">Health Check</a></p>
    '''

@app.route('/health')
def health():
    return {'status': 'healthy', 'type': 'GraphQL API'}

# Add GraphQL endpoint
app.add_url_rule(
    '/graphql',
    view_func=GraphQLView.as_view(
        'graphql',
        schema=schema,
        graphiql=True  # Enable GraphiQL interface
    )
)

if __name__ == '__main__':
    app.run(
        host=os.getenv('HOST', '0.0.0.0'),
        port=int(os.getenv('PORT', 8000)),
        debug=os.getenv('DEBUG', 'False').lower() == 'true'
    )
''',

            'schema.py': '''"""
GraphQL Schema definition for {{ api_spec.name }}
"""

import graphene
from graphene import ObjectType, String, Int, List, Field, Mutation, Boolean
{% if api_spec.database_required %}
from graphene_sqlalchemy import SQLAlchemyObjectType
{% endif %}

{% for model in api_spec.models %}
class {{ model.name }}Type(ObjectType):
    """{{ model.name }} GraphQL type"""
    {% for field in model.fields %}
    {{ field.name }} = {% if field.type == 'integer' %}Int(){% elif field.type == 'string' %}String(){% elif field.type == 'boolean' %}Boolean(){% else %}String(){% endif %}
    {% endfor %}

class {{ model.name }}Input(graphene.InputObjectType):
    """Input type for {{ model.name }} mutations"""
    {% for field in model.fields %}
    {% if field.name != 'id' and not field.get('auto_now_add') and not field.get('auto_now') %}
    {{ field.name }} = {% if field.type == 'integer' %}Int(){% elif field.type == 'string' %}String(){% elif field.type == 'boolean' %}Boolean(){% else %}String(){% endif %}
    {% endif %}
    {% endfor %}

{% endfor %}

class Query(ObjectType):
    """Root Query"""
    
    # Health check
    health = String()
    
    {% for model in api_spec.models %}
    # {{ model.name }} queries
    {{ model.name.lower() }} = Field({{ model.name }}Type, id=Int(required=True))
    all_{{ model.name.lower() }}s = List({{ model.name }}Type)
    {% endfor %}
    
    def resolve_health(self, info):
        return "GraphQL API is healthy"

class Mutations(ObjectType):
    """Root Mutations"""
    
    {% for model in api_spec.models %}
    # {{ model.name }} mutations
    create_{{ model.name.lower() }} = Field({{ model.name }}Type, data={{ model.name }}Input(required=True))
    update_{{ model.name.lower() }} = Field({{ model.name }}Type, id=Int(required=True), data={{ model.name }}Input(required=True))
    delete_{{ model.name.lower() }} = Boolean(id=Int(required=True))
    {% endfor %}

# Create the schema
schema = graphene.Schema(query=Query, mutation=Mutations)
''',

            'requirements.txt': '''graphene==3.3.0
flask==3.0.0
flask-graphql==2.0.1
flask-cors==4.0.0
{% if api_spec.database_required %}
flask-sqlalchemy==3.1.1
graphene-sqlalchemy==3.0.0
{% endif %}
{% if api_spec.auth_type %}
flask-jwt-extended==4.6.0
pyjwt==2.8.0
{% endif %}
python-dotenv==1.0.0
gunicorn==21.2.0
''',

            'resolvers.py': '''"""
GraphQL Resolvers for {{ api_spec.name }}
"""

{% if api_spec.database_required %}
from models import {% for model in api_spec.models %}{{ model.name }}Model{% if not loop.last %}, {% endif %}{% endfor %}
from database import db
{% endif %}
{% if api_spec.auth_type %}
from auth import auth_required
{% endif %}

class Resolvers:
    """GraphQL resolvers"""
    
    {% for model in api_spec.models %}
    @staticmethod
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def resolve_{{ model.name.lower() }}(parent, info, id):
        """Resolve single {{ model.name.lower() }}"""
        {% if api_spec.database_required %}
        return {{ model.name }}Model.query.get(id)
        {% else %}
        # Mock data
        return {
            'id': id,
            {% for field in model.fields %}
            {% if field.name != 'id' %}
            '{{ field.name }}': 'Sample {{ field.name }}'{% if not loop.last %},{% endif %}
            {% endif %}
            {% endfor %}
        }
        {% endif %}
    
    @staticmethod
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def resolve_all_{{ model.name.lower() }}s(parent, info):
        """Resolve all {{ model.name.lower() }}s"""
        {% if api_spec.database_required %}
        return {{ model.name }}Model.query.all()
        {% else %}
        # Mock data
        return [
            {
                'id': 1,
                {% for field in model.fields %}
                {% if field.name != 'id' %}
                '{{ field.name }}': 'Sample {{ field.name }}'{% if not loop.last %},{% endif %}
                {% endif %}
                {% endfor %}
            }
        ]
        {% endif %}
    
    @staticmethod
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def resolve_create_{{ model.name.lower() }}(parent, info, data):
        """Create new {{ model.name.lower() }}"""
        {% if api_spec.database_required %}
        new_{{ model.name.lower() }} = {{ model.name }}Model(**data)
        db.session.add(new_{{ model.name.lower() }})
        db.session.commit()
        return new_{{ model.name.lower() }}
        {% else %}
        # Mock response
        return {
            'id': 1,
            **data
        }
        {% endif %}
    
    @staticmethod
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def resolve_update_{{ model.name.lower() }}(parent, info, id, data):
        """Update {{ model.name.lower() }}"""
        {% if api_spec.database_required %}
        {{ model.name.lower() }} = {{ model.name }}Model.query.get(id)
        if not {{ model.name.lower() }}:
            raise Exception('{{ model.name }} not found')
        
        for key, value in data.items():
            setattr({{ model.name.lower() }}, key, value)
        
        db.session.commit()
        return {{ model.name.lower() }}
        {% else %}
        # Mock response
        return {
            'id': id,
            **data
        }
        {% endif %}
    
    @staticmethod
    {% if api_spec.auth_type %}
    @auth_required
    {% endif %}
    def resolve_delete_{{ model.name.lower() }}(parent, info, id):
        """Delete {{ model.name.lower() }}"""
        {% if api_spec.database_required %}
        {{ model.name.lower() }} = {{ model.name }}Model.query.get(id)
        if not {{ model.name.lower() }}:
            raise Exception('{{ model.name }} not found')
        
        db.session.delete({{ model.name.lower() }})
        db.session.commit()
        return True
        {% else %}
        # Mock response
        return True
        {% endif %}
    
    {% endfor %}
''',

            '.env.example': '''# Environment variables for {{ api_spec.name }}

FLASK_APP=app.py
FLASK_ENV=development
SECRET_KEY=your-secret-key-here
{% if api_spec.database_required %}
DATABASE_URL=postgresql://user:password@localhost:5432/{{ api_spec.name }}
{% endif %}
{% if api_spec.auth_type %}
JWT_SECRET=your-jwt-secret-here
{% endif %}
HOST=0.0.0.0
PORT=8000
DEBUG=True
GRAPHQL_PLAYGROUND=True
'''
        }

        return Environment(loader=DictLoader(templates))

    async def generate(self, api_spec: ApiSpec, output_path: Path) -> Dict[str, str]:
        """Generuje kod GraphQL"""

        # Utw√≥rz folder wyj≈õciowy
        await self.file_manager.ensure_directory(output_path)

        generated_files = {}

        # Generuj app.py
        app_content = self.templates.get_template('app.py').render(api_spec=api_spec)
        app_path = output_path / "app.py"
        await self.file_manager.write_file(app_path, app_content)
        generated_files['app.py'] = str(app_path)

        # Generuj schema.py
        schema_content = self.templates.get_template('schema.py').render(api_spec=api_spec)
        schema_path = output_path / "schema.py"
        await self.file_manager.write_file(schema_path, schema_content)
        generated_files['schema.py'] = str(schema_path)

        # Generuj resolvers.py
        resolvers_content = self.templates.get_template('resolvers.py').render(api_spec=api_spec)
        resolvers_path = output_path / "resolvers.py"
        await self.file_manager.write_file(resolvers_path, resolvers_content)
        generated_files['resolvers.py'] = str(resolvers_path)

        # Generuj requirements.txt
        req_content = self.templates.get_template('requirements.txt').render(api_spec=api_spec)
        req_path = output_path / "requirements.txt"
        await self.file_manager.write_file(req_path, req_content)
        generated_files['requirements.txt'] = str(req_path)

        # Generuj .env.example
        env_content = self.templates.get_template('.env.example').render(api_spec=api_spec)
        env_path = output_path / ".env.example"
        await self.file_manager.write_file(env_path, env_content)
        generated_files['.env.example'] = str(env_path)

        # Generuj dodatkowe pliki
        await self._generate_additional_files(api_spec, output_path, generated_files)

        return generated_files

    async def _generate_additional_files(self, api_spec: ApiSpec, output_path: Path, generated_files: Dict[str, str]):
        """Generuje dodatkowe pliki dla GraphQL"""

        # Przyk≈Çadowe queries
        queries_content = f'''# Example GraphQL queries for {api_spec.name}

# Health check
query {{
  health
}}

{"".join([f'''
# Get all {model["name"].lower()}s
query {{
  all{model["name"]}s {{
    {"".join([f"    {field['name']}" for field in model.get('fields', [])])}
  }}
}}

# Get single {model["name"].lower()}
query {{
  {model["name"].lower()}(id: 1) {{
    {"".join([f"    {field['name']}" for field in model.get('fields', [])])}
  }}
}}

# Create {model["name"].lower()}
mutation {{
  create{model["name"]}(data: {{
    {"".join([f'    {field["name"]}: "value"' for field in model.get("fields", []) if field["name"] != "id" and not field.get("auto_now_add")])}
  }}) {{
    {"".join([f"    {field['name']}" for field in model.get('fields', [])])}
  }}
}}
''' for model in api_spec.models])}
'''

        queries_path = output_path / "example_queries.graphql"
        await self.file_manager.write_file(queries_path, queries_content)
        generated_files['example_queries.graphql'] = str(queries_path)

        # GraphQL config file
        config_content = f'''{{
  "schema": "schema.py",
  "extensions": {{
    "endpoints": {{
      "default": {{
        "url": "http://localhost:8000/graphql",
        "headers": {{
          "user-agent": "{api_spec.name}-client"
        }}
      }}
    }}
  }}
}}
'''

        config_path = output_path / ".graphqlconfig"
        await self.file_manager.write_file(config_path, config_content)
        generated_files['.graphqlconfig'] = str(config_path)